// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: maestro.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "maestro";

export interface Empty {
}

export interface InventoryItem {
  sku: string;
  name: string;
  quantity: number;
  threshold: number;
  leadTimeDays: number;
}

export interface InventoryList {
  items: InventoryItem[];
}

export interface UpdateRequest {
  updates: InventoryItem[];
}

export interface TriggeredAction {
  sku: string;
  action: string;
  reason: string;
}

export interface TriggeredActions {
  actions: TriggeredAction[];
}

export interface Status {
  ok: boolean;
  message: string;
}

function createBaseEmpty(): Empty {
  return {};
}

export const Empty: MessageFns<Empty> = {
  encode(_: Empty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Empty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Empty {
    return {};
  },

  toJSON(_: Empty): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Empty>, I>>(base?: I): Empty {
    return Empty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Empty>, I>>(_: I): Empty {
    const message = createBaseEmpty();
    return message;
  },
};

function createBaseInventoryItem(): InventoryItem {
  return { sku: "", name: "", quantity: 0, threshold: 0, leadTimeDays: 0 };
}

export const InventoryItem: MessageFns<InventoryItem> = {
  encode(message: InventoryItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sku !== "") {
      writer.uint32(10).string(message.sku);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.quantity !== 0) {
      writer.uint32(24).int32(message.quantity);
    }
    if (message.threshold !== 0) {
      writer.uint32(32).int32(message.threshold);
    }
    if (message.leadTimeDays !== 0) {
      writer.uint32(40).int32(message.leadTimeDays);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InventoryItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInventoryItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sku = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.quantity = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.threshold = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.leadTimeDays = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InventoryItem {
    return {
      sku: isSet(object.sku) ? globalThis.String(object.sku) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
      threshold: isSet(object.threshold) ? globalThis.Number(object.threshold) : 0,
      leadTimeDays: isSet(object.leadTimeDays) ? globalThis.Number(object.leadTimeDays) : 0,
    };
  },

  toJSON(message: InventoryItem): unknown {
    const obj: any = {};
    if (message.sku !== "") {
      obj.sku = message.sku;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.quantity !== 0) {
      obj.quantity = Math.round(message.quantity);
    }
    if (message.threshold !== 0) {
      obj.threshold = Math.round(message.threshold);
    }
    if (message.leadTimeDays !== 0) {
      obj.leadTimeDays = Math.round(message.leadTimeDays);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InventoryItem>, I>>(base?: I): InventoryItem {
    return InventoryItem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InventoryItem>, I>>(object: I): InventoryItem {
    const message = createBaseInventoryItem();
    message.sku = object.sku ?? "";
    message.name = object.name ?? "";
    message.quantity = object.quantity ?? 0;
    message.threshold = object.threshold ?? 0;
    message.leadTimeDays = object.leadTimeDays ?? 0;
    return message;
  },
};

function createBaseInventoryList(): InventoryList {
  return { items: [] };
}

export const InventoryList: MessageFns<InventoryList> = {
  encode(message: InventoryList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.items) {
      InventoryItem.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InventoryList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInventoryList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.items.push(InventoryItem.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InventoryList {
    return {
      items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => InventoryItem.fromJSON(e)) : [],
    };
  },

  toJSON(message: InventoryList): unknown {
    const obj: any = {};
    if (message.items?.length) {
      obj.items = message.items.map((e) => InventoryItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InventoryList>, I>>(base?: I): InventoryList {
    return InventoryList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InventoryList>, I>>(object: I): InventoryList {
    const message = createBaseInventoryList();
    message.items = object.items?.map((e) => InventoryItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateRequest(): UpdateRequest {
  return { updates: [] };
}

export const UpdateRequest: MessageFns<UpdateRequest> = {
  encode(message: UpdateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.updates) {
      InventoryItem.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.updates.push(InventoryItem.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateRequest {
    return {
      updates: globalThis.Array.isArray(object?.updates)
        ? object.updates.map((e: any) => InventoryItem.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UpdateRequest): unknown {
    const obj: any = {};
    if (message.updates?.length) {
      obj.updates = message.updates.map((e) => InventoryItem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateRequest>, I>>(base?: I): UpdateRequest {
    return UpdateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateRequest>, I>>(object: I): UpdateRequest {
    const message = createBaseUpdateRequest();
    message.updates = object.updates?.map((e) => InventoryItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTriggeredAction(): TriggeredAction {
  return { sku: "", action: "", reason: "" };
}

export const TriggeredAction: MessageFns<TriggeredAction> = {
  encode(message: TriggeredAction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sku !== "") {
      writer.uint32(10).string(message.sku);
    }
    if (message.action !== "") {
      writer.uint32(18).string(message.action);
    }
    if (message.reason !== "") {
      writer.uint32(26).string(message.reason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TriggeredAction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTriggeredAction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sku = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.action = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.reason = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TriggeredAction {
    return {
      sku: isSet(object.sku) ? globalThis.String(object.sku) : "",
      action: isSet(object.action) ? globalThis.String(object.action) : "",
      reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
    };
  },

  toJSON(message: TriggeredAction): unknown {
    const obj: any = {};
    if (message.sku !== "") {
      obj.sku = message.sku;
    }
    if (message.action !== "") {
      obj.action = message.action;
    }
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TriggeredAction>, I>>(base?: I): TriggeredAction {
    return TriggeredAction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TriggeredAction>, I>>(object: I): TriggeredAction {
    const message = createBaseTriggeredAction();
    message.sku = object.sku ?? "";
    message.action = object.action ?? "";
    message.reason = object.reason ?? "";
    return message;
  },
};

function createBaseTriggeredActions(): TriggeredActions {
  return { actions: [] };
}

export const TriggeredActions: MessageFns<TriggeredActions> = {
  encode(message: TriggeredActions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.actions) {
      TriggeredAction.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TriggeredActions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTriggeredActions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.actions.push(TriggeredAction.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TriggeredActions {
    return {
      actions: globalThis.Array.isArray(object?.actions)
        ? object.actions.map((e: any) => TriggeredAction.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TriggeredActions): unknown {
    const obj: any = {};
    if (message.actions?.length) {
      obj.actions = message.actions.map((e) => TriggeredAction.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TriggeredActions>, I>>(base?: I): TriggeredActions {
    return TriggeredActions.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TriggeredActions>, I>>(object: I): TriggeredActions {
    const message = createBaseTriggeredActions();
    message.actions = object.actions?.map((e) => TriggeredAction.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStatus(): Status {
  return { ok: false, message: "" };
}

export const Status: MessageFns<Status> = {
  encode(message: Status, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ok !== false) {
      writer.uint32(8).bool(message.ok);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Status {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.ok = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Status {
    return {
      ok: isSet(object.ok) ? globalThis.Boolean(object.ok) : false,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: Status): unknown {
    const obj: any = {};
    if (message.ok !== false) {
      obj.ok = message.ok;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Status>, I>>(base?: I): Status {
    return Status.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Status>, I>>(object: I): Status {
    const message = createBaseStatus();
    message.ok = object.ok ?? false;
    message.message = object.message ?? "";
    return message;
  },
};

export interface Maestro {
  GetInventory(request: Empty): Promise<InventoryList>;
  UpdateInventory(request: UpdateRequest): Promise<Status>;
  EvaluateRules(request: Empty): Promise<TriggeredActions>;
}

export const MaestroServiceName = "maestro.Maestro";
export class MaestroClientImpl implements Maestro {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MaestroServiceName;
    this.rpc = rpc;
    this.GetInventory = this.GetInventory.bind(this);
    this.UpdateInventory = this.UpdateInventory.bind(this);
    this.EvaluateRules = this.EvaluateRules.bind(this);
  }
  GetInventory(request: Empty): Promise<InventoryList> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetInventory", data);
    return promise.then((data) => InventoryList.decode(new BinaryReader(data)));
  }

  UpdateInventory(request: UpdateRequest): Promise<Status> {
    const data = UpdateRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateInventory", data);
    return promise.then((data) => Status.decode(new BinaryReader(data)));
  }

  EvaluateRules(request: Empty): Promise<TriggeredActions> {
    const data = Empty.encode(request).finish();
    const promise = this.rpc.request(this.service, "EvaluateRules", data);
    return promise.then((data) => TriggeredActions.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
